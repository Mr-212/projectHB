<?php

namespace App\Http\Livewire\Client\Tables;

use App\Models\ClientLogs;
use App\Models\PropertyLogs;
use Mediconesystems\LivewireDatatables\Http\Livewire\LivewireDatatable;
use Mediconesystems\LivewireDatatables\Column;
use App\Models\User;

class ClientPropertyChecklistLogTable extends LivewireDatatable
{
    public $client_id,$property_id;
    public function mount($model = null, $include = [], $exclude = [], $hide = [], $dates = [], $times = [], $searchable = [], $sort = null, $hideHeader = null, $hidePagination = null, $perPage = 10, $exportable = false, $hideable = false, $beforeTableSlot = false, $afterTableSlot = false, $params = [])
    {
        $this->property_id = isset($params['property_id']) ? $params['property_id'] : null;
        $this->client_id   = isset($params['client_id']) ?   $params['client_id']   : null;
        parent::mount($model, $include, $exclude, $hide, $dates, $times, $searchable, $sort, $hideHeader, $hidePagination, $perPage, $exportable, $hideable, $beforeTableSlot, $afterTableSlot, $params); // TODO: Change the autogenerated stub
    }

    public function builder()
    {

        if($this->property_id){
            return PropertyLogs::query()
                ->leftJoin('client_logs','client_logs.client_id','property_logs.client_id')
                ->leftJoin('pre_closing_logs','pre_closing_logs.property_id','property_logs.property_id')
                ->where('property_logs.property_id',$this->property_id)
                ->groupBy('property_logs.id','client_logs.id','pre_closing_logs.id')
                ->orderBY('property_logs.id','desc')
                ->orderBY('client_logs.id','desc')
                ->orderBY('pre_closing_logs.id','desc');
        }

        if($this->client_id) {
            return ClientLogs::query()
                ->where('client_id', $this->client_id)->orderBy('created_at', 'desc');
        }
    }

    public function columns()
    {
        return [
            Column::name('client_logs.changes')
                ->label('Client Changes'),

            Column::callback(['client_logs.updated_by'], function ($updated_by) {
                return User::getUserNameByID($updated_by);
            })->label('Client Updated By'),


            Column::name('changes')
                ->label('Property Changes'),
            Column::callback(['updated_by'], function ($updated_by) {
                return User::getUserNameByID($updated_by);
            })->label('Property Updated By'),



            Column::name('pre_closing_logs.changes')
                ->label('Pre Closing Changes'),
            Column::callback(['pre_closing_logs.updated_by'], function ($updated_by) {
                return User::getUserNameByID($updated_by);
            })->label('Pre Closing Updated By'),



        ];
    }
}