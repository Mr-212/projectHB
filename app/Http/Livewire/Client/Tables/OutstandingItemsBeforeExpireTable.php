<?php

namespace App\Http\Livewire\Client\Tables;

use App\Constants\ClientStatusConstant;
use App\Constants\Dropdowns\MortgageTypeDropdown;
use App\Constants\Dropdowns\YesNoDropdown;
use App\Models\Client;
use App\Models\ClientProperty;
use App\Models\User;
use Mediconesystems\LivewireDatatables\Http\Livewire\LivewireDatatable;
use Mediconesystems\LivewireDatatables\Column;
use Mediconesystems\LivewireDatatables\NumberColumn;
use App\Constants\PropertyStatusConstant;
use App\Models\Property;
class OutstandingItemsBeforeExpireTable extends LivewireDatatable
{

    public function mount($model = null, $include = [], $exclude = [], $hide = [], $dates = [], $times = [], $searchable = [], $sort = null, $hideHeader = null, $hidePagination = null, $perPage = 10, $exportable = false, $hideable = false, $beforeTableSlot = false, $afterTableSlot = false, $params = [])
    {
        parent::mount($model, $include, $exclude, $hide, $dates, $times, $searchable, $sort, $hideHeader, $hidePagination, $perPage, $exportable, $hideable, $beforeTableSlot, $afterTableSlot, $params); // TODO: Change the autogenerated stub
    }

    public function builder()
    {

        return Property::query()->with('client','pre_closing')->beforeDDExpire();

    }

    public function columns()
    {
        return [
            Column::callback(['id','client.id'], function ($id,$client_id) {
                return view('livewire.client.tables.actions.index', ['property_id' => $id,'client_id' => $client_id]);
            }),

            NumberColumn::name('id')
                ->defaultSort('id')
                ->label('ID'),

            Column::name('client.applicant_name')
                ->label('Applicant Name')
                ->filterable(),

            Column::name('client.applicant_email')
                ->filterable(),


            Column::callback('property_status_id',function($stage){
                return PropertyStatusConstant::getValueByKey($stage);
            })->label('Stage'),

            Column::name('house_number_and_street')
                ->label('House Address')
                ->filterable(),

            Column::name('city')
                ->label('City')
                ->filterable(),

            Column::name('state')
                ->label('State'),

            Column::name('county')
                ->label('County'),

            Column::name('zip')
                ->label('Zip'),



//            Column::callback(['updated_by'], function ($updated_by) {
//                return User::getUserNameByID($updated_by);
//            })->label('Updated By'),



            Column::callback('pre_closing.welcome_payment_checked',function($field){
                if($field){
                    return view('livewire.property.tables.actions.check-icon');
                }
            })->label('Welcome Payment'),


            Column::callback('pre_closing.rental_verification_checked',function($field){
                if($field){
                    return view('livewire.property.tables.actions.check-icon');
                }
            })->label('Rental Verification'),

            Column::callback('pre_closing.deal_save_checked',function($field){
                if($field){
                    return view('livewire.property.tables.actions.check-icon');
                }
            })->label('Deal Save?'),

            Column::callback('pre_closing.letter_of_commitment_checked',function($field){
                if($field){
                    return view('livewire.property.tables.actions.check-icon');
                }
            })->label('Letter of Commitment'),

            Column::callback('pre_closing.on_boarding_fee_payment_checked',function($field){
                if($field){
                    return view('livewire.property.tables.actions.check-icon');
                }
            })->label('On Boarding Fee'),

            Column::callback('pre_closing.inspection_checked',function($field){
                if($field){
                    return view('livewire.property.tables.actions.check-icon');
                }
            })->label('Inspection'),

            Column::callback('pre_closing.termite_checked',function($field){
                if($field){
                    return view('livewire.property.tables.actions.check-icon');
                }
            })->label('Termite'),

            Column::callback('pre_closing.appraisal_value_checked',function($field){
                if($field){
                    return view('livewire.property.tables.actions.check-icon');
                }
            })->label('Appraisal'),


            Column::callback('pre_closing.renter_insurance_checked',function($field){
                if($field){
                    return view('livewire.property.tables.actions.check-icon');
                }
            })->label('Renter Insurance'),

            Column::callback('pre_closing.flood_certificate_checked',function($field){
                if($field){
                    return view('livewire.property.tables.actions.check-icon');
                }
            })->label('Flood Certificate'),

            Column::callback('pre_closing.warranty_checked',function($field){
                if($field){
                    return view('livewire.property.tables.actions.check-icon');
                }
            })->label('Warranty'),

            Column::callback('pre_closing.lease_signed_checked',function($field){
                if($field){
                    return view('livewire.property.tables.actions.check-icon');
                }
            })->label('Lease'),



        ];
    }
}